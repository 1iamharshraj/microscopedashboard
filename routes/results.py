"""
Results route - Display analysis results with visualizations
"""

from flask import Blueprint, render_template, request, jsonify, send_from_directory, make_response
import os
from services.database import get_report_by_id

bp = Blueprint('results', __name__)

@bp.route('/results/<int:report_id>')
def results(report_id):
    """Display analysis results for a specific report"""
    report = get_report_by_id(report_id)
    if not report:
        return redirect(url_for('reports.reports'))
    
    # Parse JSON fields
    import json
    try:
        plankton_summary = json.loads(report['plankton_summary']) if report['plankton_summary'] else {}
    except:
        plankton_summary = {}
    
    return render_template('results.html', 
                         report=report, 
                         plankton_summary=plankton_summary)

@bp.route('/results/<int:report_id>/export/csv')
def export_csv(report_id):
    """Export report results as CSV"""
    try:
        report = get_report_by_id(report_id)
        if not report:
            return jsonify({'error': 'Report not found'}), 404
        
        import csv
        import io
        
        output = io.StringIO()
        writer = csv.writer(output)
        
        # Write headers
        writer.writerow(['Analysis Results'])
        writer.writerow([])
        
        # Basic info
        writer.writerow(['Slide Name', report['slide_name']])
        writer.writerow(['Location', report['location']])
        writer.writerow(['User', report['user']])
        writer.writerow(['Timestamp', report['timestamp']])
        writer.writerow([])
        
        # Microplastic results
        writer.writerow(['MICROPLASTIC ANALYSIS'])
        writer.writerow(['Present', report['microplastics_present']])
        writer.writerow(['Count', report['particle_count']])
        writer.writerow(['Confidence', f"{report['confidence']:.2f}"])
        writer.writerow([])
        
        # Plankton results
        writer.writerow(['PLANKTON ANALYSIS'])
        if report['plankton_summary']:
            try:
                import json
                plankton_data = json.loads(report['plankton_summary'])
                if 'summary' in plankton_data:
                    writer.writerow(['Species Summary'])
                    for species, count in plankton_data['summary'].items():
                        writer.writerow([species, count])
            except:
                writer.writerow(['Error parsing plankton data'])
        
        csv_content = output.getvalue()
        output.close()
        
        response = make_response(csv_content)
        response.headers['Content-Type'] = 'text/csv'
        response.headers['Content-Disposition'] = f'attachment; filename=results_{report_id}.csv'
        
        return response
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@bp.route('/results/<int:report_id>/export/pdf')
def export_pdf(report_id):
    """Export report results as PDF (placeholder)"""
    try:
        report = get_report_by_id(report_id)
        if not report:
            return jsonify({'error': 'Report not found'}), 404
        
        # For now, return a simple text response
        # In a real implementation, you would use a PDF library like ReportLab
        pdf_content = f"""
        MICROBE INSIGHTS - ANALYSIS REPORT
        =================================
        
        Report ID: {report['id']}
        Slide Name: {report['slide_name']}
        Location: {report['location']}
        User: {report['user']}
        Timestamp: {report['timestamp']}
        
        MICROPLASTIC ANALYSIS
        ---------------------
        Present: {report['microplastics_present']}
        Count: {report['particle_count']}
        Confidence: {report['confidence']:.2f}
        
        PLANKTON ANALYSIS
        -----------------
        {report['plankton_summary'] or 'No data available'}
        
        Generated by Microbe Insights
        """
        
        response = make_response(pdf_content)
        response.headers['Content-Type'] = 'text/plain'
        response.headers['Content-Disposition'] = f'attachment; filename=results_{report_id}.txt'
        
        return response
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@bp.route('/results/<int:report_id>/roi/<filename>')
def get_roi_image(report_id, filename):
    """Serve ROI images"""
    try:
        report = get_report_by_id(report_id)
        if not report:
            return jsonify({'error': 'Report not found'}), 404
        
        # Check if ROI file exists in results directory
        roi_path = os.path.join('data/results', f"roi_{report_id}_{filename}")
        if os.path.exists(roi_path):
            return send_from_directory('data/results', f"roi_{report_id}_{filename}")
        else:
            # Return a placeholder image or 404
            return jsonify({'error': 'ROI image not found'}), 404
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500
